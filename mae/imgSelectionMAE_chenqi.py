#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 21 22:39:34 2022

@author: guo.1648
"""

# referenced from engine_finetune.py func evaluate(),
# and imgSelection_chenqi.py

# the code to use MAE selecting images generated by cGAN for training.
# here we select those whose pred_prob > thresh using a pretrained & finetuned MAE classifier.
# Later these slected images will be combined with orig images and then for classification.


# NOTE:
# from class VisionTransformer(nn.Module) in pytorch-image-models/timm/models/vision_transformer.py :

# Classifier Head:
# self.fc_norm = norm_layer(embed_dim) if use_fc_norm else nn.Identity()
# final_chs = self.representation_size if self.representation_size else self.embed_dim
# self.head = nn.Linear(final_chs, num_classes) if num_classes > 0 else nn.Identity()

# def forward_head(self, x, pre_logits: bool = False):
#     if self.global_pool:
#         x = x[:, 1:].mean(dim=1) if self.global_pool == 'avg' else x[:, 0]
#     x = self.fc_norm(x)
#     x = self.pre_logits(x)
#     return x if pre_logits else self.head(x)


import pickle
import argparse
import datetime
import json
import numpy as np
import os
import time
from pathlib import Path

import torch
import torch.backends.cudnn as cudnn
from torch.utils.tensorboard import SummaryWriter

import timm

assert timm.__version__ == "0.3.2" # version check
from timm.models.layers import trunc_normal_
from timm.data.mixup import Mixup
from timm.loss import LabelSmoothingCrossEntropy, SoftTargetCrossEntropy

import util.lr_decay as lrd
import util.misc as misc
from util.datasets import build_dataset_chenqi
from util.pos_embed import interpolate_pos_embed
from util.misc import NativeScalerWithGradNormCount as NativeScaler

import models_vit

from engine_finetune import train_one_epoch#, evaluate




def get_args_parser():
    parser = argparse.ArgumentParser('MAE for image classification to select cGAN images', add_help=False)
    parser.add_argument('--batch_size', default=64, type=int,
                        help='Batch size per GPU (effective batch size is batch_size * accum_iter * # gpus')
    parser.add_argument('--epochs', default=50, type=int)
    parser.add_argument('--accum_iter', default=1, type=int,
                        help='Accumulate gradient iterations (for increasing the effective batch size under memory constraints)')

    # Model parameters
    parser.add_argument('--model', default='vit_large_patch16', type=str, metavar='MODEL',
                        help='Name of model to train')

    parser.add_argument('--input_size', default=224, type=int,
                        help='images input size')

    parser.add_argument('--drop_path', type=float, default=0.1, metavar='PCT',
                        help='Drop path rate (default: 0.1)')

    # Optimizer parameters
    parser.add_argument('--clip_grad', type=float, default=None, metavar='NORM',
                        help='Clip gradient norm (default: None, no clipping)')
    parser.add_argument('--weight_decay', type=float, default=0.05,
                        help='weight decay (default: 0.05)')

    parser.add_argument('--lr', type=float, default=None, metavar='LR',
                        help='learning rate (absolute lr)')
    parser.add_argument('--blr', type=float, default=1e-3, metavar='LR',
                        help='base learning rate: absolute_lr = base_lr * total_batch_size / 256')
    parser.add_argument('--layer_decay', type=float, default=0.75,
                        help='layer-wise lr decay from ELECTRA/BEiT')

    parser.add_argument('--min_lr', type=float, default=1e-6, metavar='LR',
                        help='lower lr bound for cyclic schedulers that hit 0')

    parser.add_argument('--warmup_epochs', type=int, default=5, metavar='N',
                        help='epochs to warmup LR')

    # Augmentation parameters
    parser.add_argument('--color_jitter', type=float, default=None, metavar='PCT',
                        help='Color jitter factor (enabled only when not using Auto/RandAug)')
    parser.add_argument('--aa', type=str, default='rand-m9-mstd0.5-inc1', metavar='NAME',
                        help='Use AutoAugment policy. "v0" or "original". " + "(default: rand-m9-mstd0.5-inc1)'),
    parser.add_argument('--smoothing', type=float, default=0.1,
                        help='Label smoothing (default: 0.1)')

    # * Random Erase params
    parser.add_argument('--reprob', type=float, default=0.25, metavar='PCT',
                        help='Random erase prob (default: 0.25)')
    parser.add_argument('--remode', type=str, default='pixel',
                        help='Random erase mode (default: "pixel")')
    parser.add_argument('--recount', type=int, default=1,
                        help='Random erase count (default: 1)')
    parser.add_argument('--resplit', action='store_true', default=False,
                        help='Do not random erase first (clean) augmentation split')

    # * Mixup params
    parser.add_argument('--mixup', type=float, default=0,
                        help='mixup alpha, mixup enabled if > 0.')
    parser.add_argument('--cutmix', type=float, default=0,
                        help='cutmix alpha, cutmix enabled if > 0.')
    parser.add_argument('--cutmix_minmax', type=float, nargs='+', default=None,
                        help='cutmix min/max ratio, overrides alpha and enables cutmix if set (default: None)')
    parser.add_argument('--mixup_prob', type=float, default=1.0,
                        help='Probability of performing mixup or cutmix when either/both is enabled')
    parser.add_argument('--mixup_switch_prob', type=float, default=0.5,
                        help='Probability of switching to cutmix when both mixup and cutmix enabled')
    parser.add_argument('--mixup_mode', type=str, default='batch',
                        help='How to apply mixup/cutmix params. Per "batch", "pair", or "elem"')

    # * Finetuning params
    parser.add_argument('--finetune', default='',
                        help='finetune from checkpoint')
    parser.add_argument('--global_pool', action='store_true')
    parser.set_defaults(global_pool=True)
    parser.add_argument('--cls_token', action='store_false', dest='global_pool',
                        help='Use class token instead of global pool for classification')

    # Dataset parameters
    parser.add_argument('--data_path', default='/datasets01/imagenet_full_size/061417/', type=str,
                        help='dataset path')
    parser.add_argument('--nb_classes', default=1000, type=int,
                        help='number of the classification types')

    parser.add_argument('--output_dir', default='./output_dir',
                        help='path where to save, empty for no saving')
    parser.add_argument('--log_dir', default='./output_dir',
                        help='path where to tensorboard log')
    parser.add_argument('--device', default='cuda',
                        help='device to use for training / testing')
    parser.add_argument('--seed', default=0, type=int)
    parser.add_argument('--resume', default='',
                        help='resume from checkpoint')

    parser.add_argument('--start_epoch', default=0, type=int, metavar='N',
                        help='start epoch')
    parser.add_argument('--eval', action='store_true',
                        help='Perform evaluation only')
    parser.add_argument('--dist_eval', action='store_true', default=False,
                        help='Enabling distributed evaluation (recommended during training for faster monitor')
    parser.add_argument('--num_workers', default=10, type=int)
    parser.add_argument('--pin_mem', action='store_true',
                        help='Pin CPU memory in DataLoader for more efficient (sometimes) transfer to GPU.')
    parser.add_argument('--no_pin_mem', action='store_false', dest='pin_mem')
    parser.set_defaults(pin_mem=True)

    # distributed training parameters
    parser.add_argument('--world_size', default=1, type=int,
                        help='number of distributed processes')
    parser.add_argument('--local_rank', default=-1, type=int)
    parser.add_argument('--dist_on_itp', action='store_true')
    parser.add_argument('--dist_url', default='env://',
                        help='url used to set up distributed training')
    
    
    return parser
    



@torch.no_grad()
def evaluate_chenqi(data_loader, model, device):
    
    #criterion = torch.nn.CrossEntropyLoss()

    metric_logger = misc.MetricLogger(delimiter="  ")
    header = 'Test:'

    # switch to evaluation mode
    model.eval()
    
    prob_dict = {} # the dict storing pred_prob of all images that predicted as True (i.e., pred==target)
    prob_dict_false = {} # the dict storing pred_prob of all images that predicted as False (i.e., pred!=target)
    
    """
    ### just for debug:
    pred_prob_dict_fName = args.data_path +'all_prob_dict.pkl'
    print('^^^ pred_prob_dict_fName = ' + pred_prob_dict_fName)
    assert(False)
    """

    for batch in metric_logger.log_every(data_loader, 10, header):
        
        #print('^^^ len(batch) = ' + str(len(batch))) # 2
        #assert(False)
        
        #images = batch[0]
        #target = batch[1]
        #img_path = batch[2]
        
        (images,target),(img_path,_) = batch
        
        """
        ### just for debug:
        print('************************** debug1 begin:')
        print('^^^ images.shape = ' + str(images.shape))
        print('^^^ target.shape = ' + str(target.shape))
        print(target)
        print('^^^ len(img_path) = ' + str(len(img_path)))
        print(img_path)
        print('************************** debug1 end:')
        #assert(False)
        """
        
        images = images.to(device, non_blocking=True)
        target = target.to(device, non_blocking=True)
        
        # compute output
        with torch.cuda.amp.autocast():
            output = model(images)
            #loss = criterion(output, target)
            
            # get prediction:
            topk=(1,)
            maxk = max(topk)
            _, pred = output.topk(maxk, 1, True, True)
            pred = pred.t()
            pred = pred[0].tolist()
            
            # also get the corresponding probability for this pred:
            dum_ind = [*range(len(pred))]
            pred_prob = output[dum_ind,pred]
            these_pred_prob = pred_prob.tolist()
            
            if_keep = (np.array(pred)==np.array(target.tolist()))
            
            for i, ele_keep in enumerate(if_keep):
                this_imgFullName = img_path[i]
                assert(os.path.exists(this_imgFullName))
                if not ele_keep:
                    print('delete img i = '+str(i))
                    this_pred_prob = these_pred_prob[i]
                    prob_dict_false[this_imgFullName] = this_pred_prob # newly added: to plot hist later!
                    # delete this generated image:
                    os.remove(this_imgFullName)
                else:
                    # save the probability:
                    print('keep img i = '+str(i))
                    this_pred_prob = these_pred_prob[i]
                    prob_dict[this_imgFullName] = this_pred_prob
                    #print('prob_dict = ' + str(prob_dict))
            
            
            """
            ### just for debug:
            print('************************** debug2 begin:')
            #print('^^^ output.shape = ' + str(output.shape))
            #print(output)
            print('^^^ len(pred) = ' + str(len(pred)))
            print(pred)
            print('^^^ len(these_pred_prob) = ' + str(len(these_pred_prob)))
            print(these_pred_prob)
            print('^^^ len(if_keep) = ' + str(len(if_keep)))
            print(if_keep)
            #print(target.tolist())
            print('************************** debug2 end:')
            assert(False)
            """
            
    # gather the stats from all processes
    metric_logger.synchronize_between_processes()        
    
    # save the all_prob_dict to pkl:
    pred_prob_dict_fName = args.data_path +'all_prob_dict.pkl'
    f_pkl = open(pred_prob_dict_fName, 'wb')
    pickle.dump(prob_dict,f_pkl)
    f_pkl.close()    
            
    pred_prob_false_dict_fName = args.data_path +'all_prob_dict_false.pkl'
    f_pkl = open(pred_prob_false_dict_fName, 'wb')
    pickle.dump(prob_dict_false,f_pkl)
    f_pkl.close()
    
    
    return




    
def main(args):
    misc.init_distributed_mode(args)

    print('job dir: {}'.format(os.path.dirname(os.path.realpath(__file__))))
    print("{}".format(args).replace(', ', ',\n'))

    device = torch.device(args.device)

    # fix the seed for reproducibility
    seed = args.seed + misc.get_rank()
    torch.manual_seed(seed)
    np.random.seed(seed)

    cudnn.benchmark = True
    
    dataset_val = build_dataset_chenqi(is_train=False, args=args)
    
    if True:  # args.distributed:
        num_tasks = misc.get_world_size()
        global_rank = misc.get_rank()
        #sampler_train = torch.utils.data.DistributedSampler(
        #    dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True
        #)
        #print("Sampler_train = %s" % str(sampler_train))
        if args.dist_eval:
            if len(dataset_val) % num_tasks != 0:
                print('Warning: Enabling distributed evaluation with an eval dataset not divisible by process number. '
                      'This will slightly alter validation results as extra duplicate entries are added to achieve '
                      'equal num of samples per-process.')
            sampler_val = torch.utils.data.DistributedSampler(
                dataset_val, num_replicas=num_tasks, rank=global_rank, shuffle=True)  # shuffle=True to reduce monitor bias
        else:
            sampler_val = torch.utils.data.SequentialSampler(dataset_val)
    else:
        #sampler_train = torch.utils.data.RandomSampler(dataset_train)
        sampler_val = torch.utils.data.SequentialSampler(dataset_val)

    if global_rank == 0 and args.log_dir is not None and not args.eval:
        os.makedirs(args.log_dir, exist_ok=True)
        log_writer = SummaryWriter(log_dir=args.log_dir)
    else:
        log_writer = None
    
    data_loader_val = torch.utils.data.DataLoader(
        dataset_val, sampler=sampler_val,
        batch_size=args.batch_size,
        num_workers=args.num_workers,
        pin_memory=args.pin_mem,
        drop_last=False
    )
    
    mixup_fn = None
    mixup_active = args.mixup > 0 or args.cutmix > 0. or args.cutmix_minmax is not None
    if mixup_active:
        print("Mixup is activated!")
        mixup_fn = Mixup(
            mixup_alpha=args.mixup, cutmix_alpha=args.cutmix, cutmix_minmax=args.cutmix_minmax,
            prob=args.mixup_prob, switch_prob=args.mixup_switch_prob, mode=args.mixup_mode,
            label_smoothing=args.smoothing, num_classes=args.nb_classes)
    
    model = models_vit.__dict__[args.model](
        num_classes=args.nb_classes,
        drop_path_rate=args.drop_path,
        global_pool=args.global_pool,
    )
    
    model.to(device)

    model_without_ddp = model
    n_parameters = sum(p.numel() for p in model.parameters() if p.requires_grad)

    print("Model = %s" % str(model_without_ddp))
    print('number of params (M): %.2f' % (n_parameters / 1.e6))

    eff_batch_size = args.batch_size * args.accum_iter * misc.get_world_size()
    
    if args.lr is None:  # only base_lr is specified
        args.lr = args.blr * eff_batch_size / 256

    print("base lr: %.2e" % (args.lr * 256 / eff_batch_size))
    print("actual lr: %.2e" % args.lr)

    print("accumulate grad iterations: %d" % args.accum_iter)
    print("effective batch size: %d" % eff_batch_size)

    if args.distributed:
        model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])
        model_without_ddp = model.module

    # build optimizer with layer-wise lr decay (lrd)
    param_groups = lrd.param_groups_lrd(model_without_ddp, args.weight_decay,
        no_weight_decay_list=model_without_ddp.no_weight_decay(),
        layer_decay=args.layer_decay
    )
    optimizer = torch.optim.AdamW(param_groups, lr=args.lr)
    loss_scaler = NativeScaler()

    if mixup_fn is not None:
        # smoothing is handled with mixup label transform
        criterion = SoftTargetCrossEntropy()
    elif args.smoothing > 0.:
        criterion = LabelSmoothingCrossEntropy(smoothing=args.smoothing)
    else:
        criterion = torch.nn.CrossEntropyLoss()

    print("criterion = %s" % str(criterion))

    misc.load_model(args=args, model_without_ddp=model_without_ddp, optimizer=optimizer, loss_scaler=loss_scaler)

    assert(args.eval)
    
    if args.eval:
        evaluate_chenqi(data_loader_val, model, device) # referenced from func evaluate() 
        #print(f"Accuracy of the network on the {len(dataset_val)} test images: {test_stats['acc1']:.1f}%")
        exit(0)

















if __name__ == '__main__':
    args = get_args_parser()
    args = args.parse_args()
    if args.output_dir:
        Path(args.output_dir).mkdir(parents=True, exist_ok=True)
    main(args)






